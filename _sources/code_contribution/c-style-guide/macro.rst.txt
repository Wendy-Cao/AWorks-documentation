宏定义
=======

编译预处理
-----------

普通宏定义
^^^^^^^^^^^

**要求：**

1. 宏定义的符号所有字符必须使用大写字符。
2. 内部使用的宏定义符号前必须加双下划线 ``__`` 。如 :numref:`example_macro_define` 所示。

 .. code-block:: c
    :caption: 宏定义范例
    :name: example_macro_define

    #define __INTERNAL_MACRO        xxxx    /**< \brief 内部使用宏定义 */
    #define EXTERNEL_MACRO          xxxx    /**< \brief 外部使用宏定义 */

3. ``#define`` 、 ``#if`` 等等编译预处理命令必须写在一行的起始位置。
4. 每一个宏定义必须加入相关的注释，可以是行注释，也可以是函数体外的块注释。
5. ``#define`` 和被定义的符号之间留一个字符的宽度
6. ``#define`` 定义的宏名和宏体之间保留的空格数，以左对齐为标准。
7. AWorks平台还要求宏定义的符号必须使用 ``AW_`` 开头。

带参数的宏定义
^^^^^^^^^^^^^^

**要求：**

1. 简单的操作，尽量使用宏来完成。
2. 调用带参数宏定义时，不可使用单目运算符，例如： ``++`` 、 ``--`` 等等。

带参数的宏定义范例，如 :numref:`example_macro_with_args_define` 所示。

 .. code-block:: c
    :caption: 带参数的宏定义范例
    :name: example_macro_with_args_define

    /** \brief 计算两个整形数中的最大值 */
    #define __MAX(num1, num2)       (((num1) > (num2)) ? (num1) : (num2))

其他方面缩进与对其与语句块基本相同。

头文件（ ``.h`` ）中，必须使用防止嵌套引用的语句，该语句的定义如 :numref:`example_avoid_nesting_of_macro` 所示。

 .. code-block:: c
    :caption: 防止嵌套引用的编译预处理范例
    :name: example_avoid_nesting_of_macro

    #ifndef __XXX_H
    #define __XXX_H

        ... /*  头文件内容  */

    #endif /* __XXX_H */
    
**要求：**
    
1. 以上的范例中，XXX为该头文件的文件名。
2. ``#ifndef`` 和 ``#define`` 之间不允许加入空行。
3. ``#define __XXX_H`` 后面加一行空行。
4. ``#endif`` 上面留一行空行。

如果需要声明C++兼容的函数，如 :numref:`example_decl_cpp_compatible` 所示。

 .. code-block:: c
    :caption: 声明C++兼容函数范例
    :name: example_decl_cpp_compatible

    #ifdef __cplusplus
    extern "C" {
    #endif

    #ifdef __cplusplus
    }
    #endif
