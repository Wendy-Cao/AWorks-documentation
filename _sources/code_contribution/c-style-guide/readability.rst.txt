可读性结构与标识符
==================

可读性
------

**要求：**

1. 注意运算符的优先级，并用括号明确表达式的操作顺序，避免使用默认优先级。
2. 避免使用不易理解的数字，用有意义的标识来替代。涉及物理状态或者含有物理意义的常量，不应直接使用数字，必须用有意义的宏来代替。如 :numref:`example_macro_for_constant` 所示。

 .. code-block:: c
    :caption: 用宏来定义有物理或实际意义的数字范例
    :name: example_macro_for_constant

    #define TRUNK_IDLE      0   /**< 空闲 */
    #define TRUNK_BUSY      1   /**< 忙 */

 如 :numref:`example_macro_for_constant` 所示，类似代表状态的数字，必须定义为宏。

3. 源程序中关系较为紧密的代码应尽可能相邻。如 :numref:`example_coupling_code` 所示。

 .. code-block:: c
    :caption: 联系紧密的代码应该相邻范例
    :name: example_coupling_code

    /* 以下是不合理的：*/
    int     length = 10;
    char    get;
    int     weight = 20;

    /* 应该改为：*/
    int     length = 10;
    int     weight = 20;

    char    get;
    
4. 不要使用难懂的技巧性很高的语句，除非很有必要时。高技巧语句不等于高效率的程序，实际上程序的效率关键在于算法。 ``++`` ， ``--`` 运算符在一条语句中只允许出现一次。

标识符
------

标识符的命名要清晰、明了，有明确含义，同时使用完整的单词或大家基本可以理解的缩写，避免使人产生误解。

说明：较短的单词可通过去掉“元音”形成缩写；较长的单词可取单词的头几个字母形成缩写；一些单词有大家公认的缩写。

示例：如下单词的缩写能够被大家基本认可::

    temp            可缩写为  tmp  ;
    flag            可缩写为  flg  ;
    statistic       可缩写为  stat ;
    increment       可缩写为  inc  ;
    message         可缩写为  msg  ; 

**要求：**

1. 自己特有的命名风格，要自始至终保持一致，不可来回变化。
2. 除非必要，不要用数字或较奇怪的字符来定义标识符。
3. 在同一软件产品内，应规划好接口部分标识符（变量、结构、函数及常量）的命名，防止编译、链接时产生冲突。
4. 用正确的反义词组命名具有互斥意义的变量或相反动作的函数等。

下面是一些在软件中常用的反义词组::

    add / remove       begin / end         create / destroy 
    insert / delete    first / last        get / release
    increment / decrement                  put / get
    add / delete       lock / unlock       open / close
    min / max          old / new           start / stop
    next / previous    show / hide         send / receive     
    cut / paste        up / down           source / destination

