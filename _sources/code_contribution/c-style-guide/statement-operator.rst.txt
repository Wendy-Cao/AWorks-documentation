
语句、语句块、赋值与运算符
=================================


语句
------

语句是组成函数与算法描述的最基本单元。关于花括号的缩进方式，采用AT&T实验室K&R风格。
详细情况请阅读 **《Recommended C style and coding standards》** 。

**要求：**

1. 语句要采用缩进风格编写，缩进的空格数为4个。
2. 关键字（除过 ``sizeof`` 和函数调用）后凡是带有括号 ``()`` ，在关键字和括号之间要加入一个空格。括号后如有大括号，必须在大括号与 ``)`` 之间加入一个空格。
3. 较长的语句（>80个字符）必须分成多行书写，长表达式必须在低优先级操作符处划分新行。划分出的新行要进行适当的缩进，使排版整齐，语句可读。如 :numref:`example_long_statement_break` 所示。

 .. code-block:: c
    :caption: 长语句划分范例
    :name: example_long_statement_break

    mem_msg_buffer[i].len = NO7_TO_STAT_PERM_COUNT_LEN
                          + (STAT_SIZE_FILE_LEN * sizeof(char))
                          + (STAT_SIZE_PER_FRAM * sizeof(__MEM_PAGE));

4. 循环、判断等语句中若有较长的表达式或语句，则要进行适应的划分，长表达式要在低
   优先级操作符处划分新行，操作符放在末尾。如 :numref:`example_circle_judge_break` 
   所示。

 .. code-block:: c
    :caption: 循环、判断长语句划分范例
    :name: example_circle_judge_break

    if (p_dest_ip[0] == p_temp[0] &&
        p_dest_ip[1] == p_temp[1] &&
        p_dest_ip[2] == p_temp[2] &&
        p_dest_ip[3] == p_temp[3]) {     /* 判断 IP 地址 */

        __eth_frame_send(...);           /* 发送数据包 */
    }

    for (i = 0;
         (i < 10 && p_temp_name != NULL);
         i += 2) {                       /* for 循环语句 */

        ...
    }
    
5. 不允许把多个短语句写在一行中，即一行只写一条语句。
6. ``if`` 、 ``for`` 、 ``do`` 、 ``while`` 、 ``case`` 、 ``switch`` 、 ``default``等语句与相关条件和大括号自占一行，且 ``if`` 、 ``for`` 、 ``do`` 、 ``while`` 等语句的执行语句部分无论多少都要加括号 ``{}`` 。
7. 对齐只使用空格键，不使用 ``TAB键`` 。
8. 一行代码必须小于 ``80`` 字符。


语句块、赋值与运算符
---------------------

语句块是由诸多语句组成，要来完成某一项工作的语句集合。语句块应该清晰、简洁。

**要求：**

1. 相对独立的语句块之间、变量说明之后必须加空行。如 :numref:`example_blank_insert` 所示。

 .. code-block:: c
    :caption: 空行的插入范例
    :name: example_blank_insert

    if (!p_name) { 
        ...        
    }
    __men_workers[i].p_arg    = 24;   
    __men_workers[i].p_weight = 60;    
    
 如果出现连续赋值语句，等号需要对齐，等号左边至少留一个空格，右边力求已最少的空格数保持对齐。

2. 函数或过程的开始、结构的定义及循环、判断等语句中的代码都要采用缩进风格， ``case`` 语句下的情况处理语句也要遵从语句缩进要求。如 :numref:`example_case_statement_align` 所示。

 .. code-block:: c
    :caption: case语句缩进范例
    :name: example_case_statement_align

    switch (msg.id) {

    case MSG_ID_1:  /* 分支 1 */
        ...
        break;      /* 跳出 */

    case MSG_ID_2:  /* 分支 2 */
        ...
        break;      /* 跳出 */

    default:        /* 默认处理 */
        ...
    }

 ``case`` 关键字和 ``switch`` 关键字对齐。分支语句放在相应 ``case`` 关键字的下一行。分支语句相对于 ``case`` 关键字的缩进是四个空格。 ``case`` 后的条件与 ``case`` 之间相隔一个空格。 ``:`` 紧接着条件常量。 ``break`` 关键字的缩进与分支语句相同。第一个 ``case`` 语句与 ``switch`` 语句之间空一行。 ``switch`` 必须要拥有 ``default`` 处理分支。

3.  ``}`` 在纵向上，应该与相应的关键字对齐，如 :numref:`example_key_word_align` 所示。

 .. code-block:: c
    :caption: ``}`` 对齐与关键字的对齐范例
    :name: example_key_word_align

    if (1) {
        ...
    }
    
4. 在两个以上的关键字、变量、常量进行对等操作时，它们之间的操作符之前、之后或者前后要加空格。范例如下：

  (1). 逗号、分号只在后面加空格::
        
      int     a, b, c;
    
  (2). 比较操作符, 赋值操作符 ``=`` 、 ``+=`` ，算术操作符 ``+`` 、 ``%`` ，逻辑操作符 ``&&`` 、 ``&`` ，位域操作符 ``<<`` 、 ``^`` 等双目操作符的前后加空格::

      if (tempa == tempb) {
          a  = b + c;
          a += 3;
          b  = c & 0x0000FFFF;
      }

5. 进行非对等操作时，操作符的前后不应该加空格。范例如下：

  (1).  ``!`` 、 ``~`` 、 ``++`` 、 ``--`` 、 ``&`` （地址运算符）等单目操作符前后不加空格::

      *p_name = &p_buffer[0];
      p_arg++;

  (2). ``->`` 、 ``.`` 前后不加空格::

      p_msg->id = 0;
      msg.id    = 0;

6. ``if`` 、 ``for`` 、 ``while`` 、 ``switch`` 等与后面的括号间应加空格，
   使 ``if`` 等关键字更为突出、明显。如 :numref:`example_use_blank_for_key_word` 所示。

 .. code-block:: c
    :caption: 使用空格突出关键字的操作范例
    :name: example_use_blank_for_key_word

    if (a >= b && c > d) {
        ...
    }
    while (counter <= 3) {
        ...
        counter++;
    }

杂项
^^^^^

**要求：**

1. 非必要不要使用 ``goto`` 语句。``goto`` 只能用于从内循环直接跳到循环外部、检测到错误直接跳到错误处理程序。影响可读性时禁止使用 ``goto`` 语句。
2. 用 ``if`` 语句来强调只执行两组语句中的一组。这种情况尽量不使用 ``switch case`` 语句。
3. 用 ``case`` 实现多路分支。
4. 不能使用C的默认操作优先级，多级操作中，每一级操作一定要使用括号进行优先级的划分。


结构化
-------

**要求：**

1. 禁止出现两条等价的支路。
2. 尽量避免从循环引出多个出口。如 :numref:`example_avoid_multi_exit_on_loop` 所示。

 .. code-block:: c
    :caption: 避免从循环引出多个出口范例
    :name: example_avoid_multi_exit_on_loop

    for (i = 0; ; i++) {
        ...;
        if (i < 100) {
            break;
        }
    }

    /* 上面的语句段应该应该改为：*/
    for (i = 0; i < 100; i++) {
        ...;
    }

3. 尽量减少函数的出口。
4. 不要轻易用条件分支去替换逻辑表达式。如 :numref:`example_avoid_replace_logic_with_if_else` 所示。

 .. code-block:: c
    :caption: 不要轻易用条件分支去替换逻辑表达式
    :name: example_avoid_replace_logic_with_if_else

    if (a == true) {
        b = false;
    } else {
        b = true;
    }

    /* 可以改为: */
    b = !a;

5. 避免不必要的分支。如 :numref:`example_avoid_unnecessary_branch` 所示。

 .. code-block:: c
    :caption: 避免不必要的分支范例
    :name: example_avoid_unnecessary_branch

    if (a == 1) {
        index++;
    } else {
        index += a;
    }
    /* 可以替换为 */
    index += a;


